
<div class="d-flex justify-content-between align-items-center mb-4">
    <h3>
        <i class="bi bi-key me-2"></i>
        Certificate Management
    </h3>
    <a href="/certificates/create" class="btn btn-primary">
        <i class="bi bi-plus-circle me-2"></i>Create New Certificate
    </a>
</div>

<!-- Quick Stats -->
<div class="row mb-4">
    <div class="col-md-3">
        <div class="card text-center">
            <div class="card-body">
                <i class="bi bi-key text-primary" style="font-size: 2rem;"></i>
                <h5 class="mt-2"><%= typeof certificates !== 'undefined' ? certificates.length : 0 %></h5>
                <p class="text-muted mb-0">Total Certificates</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-center">
            <div class="card-body">
                <i class="bi bi-check-circle text-success" style="font-size: 2rem;"></i>
                <h5 class="mt-2"><%= typeof certificates !== 'undefined' ? certificates.filter(c => c.status === 'active').length : 0 %></h5>
                <p class="text-muted mb-0">Active Certificates</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-center">
            <div class="card-body">
                <i class="bi bi-clock text-warning" style="font-size: 2rem;"></i>
                <h5 class="mt-2"><%= typeof certificates !== 'undefined' ? certificates.filter(c => c.status === 'pending').length : 0 %></h5>
                <p class="text-muted mb-0">Pending Certificates</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-center">
            <div class="card-body">
                <i class="bi bi-x-circle text-danger" style="font-size: 2rem;"></i>
                <h5 class="mt-2"><%= typeof certificates !== 'undefined' ? certificates.filter(c => c.status === 'revoked').length : 0 %></h5>
                <p class="text-muted mb-0">Revoked Certificates</p>
            </div>
        </div>
    </div>
</div>

<!-- Certificates List -->
<div class="card">
    <div class="card-header">
        <div class="row align-items-center">
            <div class="col-md-6">
                <h5 class="mb-0">
                    <i class="bi bi-list me-2"></i>Your Certificates
                </h5>
            </div>
            <div class="col-md-6">
                <div class="input-group">
                    <input type="text" class="form-control" id="searchCertificates"
                           placeholder="Search certificates...">
                    <button class="btn btn-outline-secondary" type="button" id="filterBtn">
                        <i class="bi bi-funnel"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="card-body">
        <% if (typeof certificates !== 'undefined' && certificates.length > 0) { %>
            <div class="table-responsive">
                <table class="table table-hover" id="certificatesTable">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Algorithm</th>
                            <th>Key Size</th>
                            <th>Status</th>
                            <th>Created</th>
                            <th>Expires</th>
                            <th>Usage</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% certificates.forEach(cert => { %>
                            <tr>
                                <td>
                                    <div class="fw-bold"><%= cert.name %></div>
                                    <small class="text-muted">ID: <%= cert.kid.split(':').pop().substring(0, 8) %>...</small>
                                </td>
                                <td>
                                    <span class="badge bg-info"><%= cert.algorithm %></span>
                                </td>
                                <td><%= cert.keySize %> bits</td>
                                <td>
                                    <% if (cert.status === 'active') { %>
                                        <span class="badge bg-success">Active</span>
                                    <% } else if (cert.status === 'pending') { %>
                                        <span class="badge bg-warning">Pending</span>
                                    <% } else if (cert.status === 'revoked') { %>
                                        <span class="badge bg-danger">Revoked</span>
                                    <% } else { %>
                                        <span class="badge bg-secondary"><%= cert.status %></span>
                                    <% } %>
                                </td>
                                <td>
                                    <div><%= new Date(cert.createdAt).toLocaleDateString() %></div>
                                    <small class="text-muted"><%= new Date(cert.createdAt).toLocaleTimeString() %></small>
                                </td>
                                <td>
                                    <% if (cert.expiresAt) { %>
                                        <div><%= new Date(cert.expiresAt).toLocaleDateString() %></div>
                                        <small class="text-muted">
                                            <% const daysLeft = Math.ceil((new Date(cert.expiresAt) - new Date()) / (1000 * 60 * 60 * 24)); %>
                                            <% if (daysLeft > 30) { %>
                                                <%= daysLeft %> days left
                                            <% } else if (daysLeft > 0) { %>
                                                <span class="text-warning"><%= daysLeft %> days left</span>
                                            <% } else { %>
                                                <span class="text-danger">Expired</span>
                                            <% } %>
                                        </small>
                                    <% } else { %>
                                        <span class="text-muted">No expiry</span>
                                    <% } %>
                                </td>
                                <td>
                                    <small class="text-muted">
                                        Used <%= cert.usageCount || 0 %> times
                                    </small>
                                </td>
                                <td>
                                    <div class="btn-group" role="group">
                                        <a href="/certificates/<%= cert._id %>" class="btn btn-outline-primary btn-sm"
                                           data-bs-toggle="tooltip" title="View Details">
                                            <i class="bi bi-eye"></i>
                                        </a>
                                        <% if (cert.status === 'active') { %>
                                            <button type="button" class="btn btn-outline-secondary btn-sm"
                                                    onclick="downloadCertificate('<%= cert._id %>')"
                                                    data-bs-toggle="tooltip" title="Download Public Key">
                                                <i class="bi bi-download"></i>
                                            </button>
                                        <% } %>
                                        <% if (cert.status === 'active' && user.role === 'admin') { %>
                                            <button type="button" class="btn btn-outline-warning btn-sm"
                                                    onclick="revokeCertificate('<%= cert._id %>')"
                                                    data-bs-toggle="tooltip" title="Revoke Certificate">
                                                <i class="bi bi-x-circle"></i>
                                            </button>
                                        <% } %>
                                        <% if (cert.status !== 'active' || user.role === 'admin') { %>
                                            <button type="button" class="btn btn-outline-danger btn-sm"
                                                    onclick="deleteCertificate('<%= cert._id %>')"
                                                    data-bs-toggle="tooltip" title="Delete Certificate">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        <% } %>
                                    </div>
                                </td>
                            </tr>
                        <% }); %>
                    </tbody>
                </table>
            </div>
        <% } else { %>
            <div class="text-center py-5">
                <i class="bi bi-key" style="font-size: 4rem; opacity: 0.3;"></i>
                <h4 class="mt-3 text-muted">No Certificates Found</h4>
                <p class="text-muted mb-4">
                    You haven't created any RSA certificates yet. Create your first certificate to start generating PRC documents.
                </p>
                <a href="/certificates/create" class="btn btn-primary">
                    <i class="bi bi-plus-circle me-2"></i>Create Your First Certificate
                </a>
            </div>
        <% } %>
    </div>
</div>

<!-- Information Card -->
<div class="row mt-4">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <i class="bi bi-info-circle me-2"></i>
                Certificate Management Information
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <h6>Certificate Requirements:</h6>
                        <ul class="list-unstyled small">
                            <li><i class="bi bi-check2 text-success me-2"></i>RSA algorithm (2048, 3072, or 4096 bits)</li>
                            <li><i class="bi bi-check2 text-success me-2"></i>Supports RS256, RS384, and RS512 signing</li>
                            <li><i class="bi bi-check2 text-success me-2"></i>eEHIC compliant Key ID (Kid) format</li>
                            <li><i class="bi bi-check2 text-success me-2"></i>SHA-256 thumbprint calculation (x5t#S256)</li>
                        </ul>
                    </div>
                    <div class="col-md-6">
                        <h6>Security Best Practices:</h6>
                        <ul class="list-unstyled small">
                            <li><i class="bi bi-shield-check text-primary me-2"></i>Use separate certificates for different purposes</li>
                            <li><i class="bi bi-shield-check text-primary me-2"></i>Regularly rotate certificates (every 2-3 years)</li>
                            <li><i class="bi bi-shield-check text-primary me-2"></i>Revoke compromised certificates immediately</li>
                            <li><i class="bi bi-shield-check text-primary me-2"></i>Keep private keys secure and never share them</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
// Search functionality
document.getElementById('searchCertificates').addEventListener('input', function() {
    const searchTerm = this.value.toLowerCase();
    const table = document.getElementById('certificatesTable');

    if (table) {
        const rows = table.querySelectorAll('tbody tr');
        rows.forEach(row => {
            const text = row.textContent.toLowerCase();
            row.style.display = text.includes(searchTerm) ? '' : 'none';
        });
    }
});

// Download certificate
function downloadCertificate(certificateId) {
    fetch(`/certificates/${certificateId}/download`, {
        method: 'GET'
    })
    .then(response => {
        if (response.ok) {
            return response.blob();
        }
        throw new Error('Download failed');
    })
    .then(blob => {
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `certificate_${certificateId}_public.pem`;
        a.click();
        window.URL.revokeObjectURL(url);
    })
    .catch(error => {
        console.error('Download error:', error);
        alert('Failed to download certificate. Please try again.');
    });
}

// Revoke certificate
function revokeCertificate(certificateId) {
    if (!confirm('Are you sure you want to revoke this certificate? This action cannot be undone.')) {
        return;
    }

    fetch(`/certificates/${certificateId}/revoke`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => response.json())
    .then(result => {
        if (result.success) {
            alert('Certificate revoked successfully.');
            window.location.reload();
        } else {
            alert('Failed to revoke certificate: ' + (result.error || 'Unknown error'));
        }
    })
    .catch(error => {
        console.error('Revoke error:', error);
        alert('An error occurred while revoking the certificate. Please try again.');
    });
}

// Delete certificate
function deleteCertificate(certificateId) {
    if (!confirm('Are you sure you want to delete this certificate? This action cannot be undone and will affect any documents signed with this certificate.')) {
        return;
    }

    fetch(`/certificates/${certificateId}`, {
        method: 'DELETE'
    })
    .then(response => response.json())
    .then(result => {
        if (result.success) {
            alert('Certificate deleted successfully.');
            window.location.reload();
        } else {
            alert('Failed to delete certificate: ' + (result.error || 'Unknown error'));
        }
    })
    .catch(error => {
        console.error('Delete error:', error);
        alert('An error occurred while deleting the certificate. Please try again.');
    });
}

// Initialize tooltips
document.addEventListener('DOMContentLoaded', function() {
    const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    tooltipTriggerList.map(function(tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
    });
});
</script>