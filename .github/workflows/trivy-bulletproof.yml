name: Trivy Security Scan (Bulletproof)

on:
  push:
    branches:
      - master
      - main
  pull_request:
    branches:
      - master
      - main
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      send_email:
        description: 'Send email report'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  security-scan:
    name: Trivy Security Scan - PRC Generator
    runs-on: ubuntu-latest

    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create reports directory
        run: |
          mkdir -p reports
          echo "Reports directory created"
          ls -la

      - name: Run Trivy scan (SARIF)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'reports/trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          scanners: 'vuln,secret,misconfig'
          exit-code: '0'

      - name: Run Trivy scan (Table)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          output: 'reports/trivy-report.txt'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          scanners: 'vuln,secret,misconfig'
          exit-code: '0'

      - name: Run Trivy scan (JSON)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'json'
          output: 'reports/trivy-report.json'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          scanners: 'vuln,secret,misconfig'
          exit-code: '0'

      - name: Check generated files
        run: |
          echo "Checking generated files..."
          ls -la reports/

          if [ -f reports/trivy-report.txt ]; then
            echo "‚úÖ Text report generated"
            wc -l reports/trivy-report.txt
          else
            echo "‚ùå Text report not found"
          fi

          if [ -f reports/trivy-results.sarif ]; then
            echo "‚úÖ SARIF report generated"
            wc -l reports/trivy-results.sarif
          else
            echo "‚ùå SARIF report not found"
          fi

          if [ -f reports/trivy-report.json ]; then
            echo "‚úÖ JSON report generated"
            wc -l reports/trivy-report.json
          else
            echo "‚ùå JSON report not found"
          fi

      - name: Parse scan results (simple method)
        id: scan_results
        run: |
          echo "Parsing scan results using simple text methods..."

          # Initialize counters
          CRITICAL=0
          HIGH=0
          MEDIUM=0
          LOW=0

          # Count vulnerabilities from text report if it exists
          if [ -f reports/trivy-report.txt ]; then
            echo "Parsing text report..."
            cat reports/trivy-report.txt

            # Count each severity (case-insensitive)
            CRITICAL=$(grep -i "CRITICAL" reports/trivy-report.txt | wc -l || echo 0)
            HIGH=$(grep -i "HIGH" reports/trivy-report.txt | wc -l || echo 0)
            MEDIUM=$(grep -i "MEDIUM" reports/trivy-report.txt | wc -l || echo 0)
            LOW=$(grep -i "LOW" reports/trivy-report.txt | wc -l || echo 0)

            echo "Raw counts from text file:"
            echo "CRITICAL lines: $CRITICAL"
            echo "HIGH lines: $HIGH"
            echo "MEDIUM lines: $MEDIUM"
            echo "LOW lines: $LOW"
          else
            echo "No text report found, using zero counts"
          fi

          # Ensure we have numeric values
          CRITICAL=${CRITICAL:-0}
          HIGH=${HIGH:-0}
          MEDIUM=${MEDIUM:-0}
          LOW=${LOW:-0}

          echo "Final counts:"
          echo "Critical: $CRITICAL"
          echo "High: $HIGH"
          echo "Medium: $MEDIUM"
          echo "Low: $LOW"

          # Set outputs
          echo "critical_count=$CRITICAL" >> $GITHUB_OUTPUT
          echo "high_count=$HIGH" >> $GITHUB_OUTPUT
          echo "medium_count=$MEDIUM" >> $GITHUB_OUTPUT
          echo "low_count=$LOW" >> $GITHUB_OUTPUT
          echo "total_count=$((CRITICAL + HIGH + MEDIUM + LOW))" >> $GITHUB_OUTPUT

      - name: Create summary report
        run: |
          echo "Creating summary report..."
          cat > reports/summary.txt << EOF
          TRIVY SECURITY SCAN SUMMARY - PRC QR Generator
          ===============================================
          Repository: ${{ github.repository }}
          Branch: ${{ github.ref_name }}
          Scan Date: $(date)

          VULNERABILITY STATISTICS:
          ------------------------
          üî¥ CRITICAL: ${{ steps.scan_results.outputs.critical_count }}
          üü† HIGH: ${{ steps.scan_results.outputs.high_count }}
          üü° MEDIUM: ${{ steps.scan_results.outputs.medium_count }}
          üü¢ LOW: ${{ steps.scan_results.outputs.low_count }}
          ------------------------
          TOTAL: ${{ steps.scan_results.outputs.total_count }}

          APPLICATION: PRC QR Generator (eEHIC Compliance)
          VERSION: 1.1.0 (with comprehensive logging)

          Commit: ${{ github.sha }}
          Triggered by: ${{ github.actor }}
          Workflow: ${{ github.workflow }}
          EOF

          echo "Summary report created:"
          cat reports/summary.txt

      - name: Create HTML email report
        if: ${{ github.event_name == 'schedule' || github.event.inputs.send_email == 'true' }}
        run: |
          echo "Creating HTML email report..."
          cat > reports/email-report.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>Security Scan Report - PRC QR Generator</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }
                  .container { background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                  .header { background: #0066CC; color: white; padding: 20px; text-align: center; margin: -20px -20px 20px -20px; }
                  .stats { background: #f8f9fa; padding: 15px; border-radius: 5px; margin: 20px 0; }
                  .critical { color: #dc3545; font-weight: bold; }
                  .high { color: #fd7e14; font-weight: bold; }
                  .medium { color: #ffc107; font-weight: bold; }
                  .low { color: #28a745; font-weight: bold; }
                  table { width: 100%; border-collapse: collapse; margin: 10px 0; }
                  th, td { padding: 8px; border: 1px solid #ddd; text-align: left; }
                  th { background: #007bff; color: white; }
                  .footer { margin-top: 20px; padding-top: 20px; border-top: 1px solid #ddd; font-size: 12px; color: #666; }
                  .app-info { background: #e3f2fd; padding: 10px; border-left: 4px solid #2196F3; margin: 15px 0; }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>üîí Security Scan Report</h1>
                      <p>PRC QR Generator - eEHIC Compliance Application</p>
                      <p>${{ github.repository }}</p>
                  </div>

                  <div class="app-info">
                      <h3>üìã Application Information</h3>
                      <ul>
                          <li><strong>Application:</strong> PRC QR Generator</li>
                          <li><strong>Version:</strong> 1.1.0 (Comprehensive Logging)</li>
                          <li><strong>Purpose:</strong> eEHIC-compliant Provisional Replacement Certificate generation</li>
                      </ul>
                  </div>

                  <h2>Vulnerability Summary</h2>
                  <div class="stats">
                      <table>
                          <tr><th>Severity</th><th>Count</th></tr>
                          <tr><td class="critical">üî¥ CRITICAL</td><td>${{ steps.scan_results.outputs.critical_count }}</td></tr>
                          <tr><td class="high">üü† HIGH</td><td>${{ steps.scan_results.outputs.high_count }}</td></tr>
                          <tr><td class="medium">üü° MEDIUM</td><td>${{ steps.scan_results.outputs.medium_count }}</td></tr>
                          <tr><td class="low">üü¢ LOW</td><td>${{ steps.scan_results.outputs.low_count }}</td></tr>
                          <tr><th>TOTAL</th><th>${{ steps.scan_results.outputs.total_count }}</th></tr>
                      </table>
                  </div>

                  <h2>Scan Information</h2>
                  <ul>
                      <li><strong>Repository:</strong> ${{ github.repository }}</li>
                      <li><strong>Branch:</strong> ${{ github.ref_name }}</li>
                      <li><strong>Commit:</strong> ${{ github.sha }}</li>
                      <li><strong>Scan Date:</strong> $(date)</li>
                      <li><strong>Workflow:</strong> ${{ github.workflow }}</li>
                  </ul>

                  <h2>Action Required</h2>
          EOF

          # Add conditional content based on results
          if [ "${{ steps.scan_results.outputs.critical_count }}" != "0" ]; then
            cat >> reports/email-report.html << 'EOF'
                  <div style="background: #f8d7da; padding: 15px; border-left: 4px solid #dc3545; margin: 15px 0;">
                      <h3>‚ö†Ô∏è Critical Vulnerabilities Detected!</h3>
                      <p>Immediate action required. Please review the attached detailed report.</p>
                      <p><strong>Healthcare data security compliance may be at risk.</strong></p>
                  </div>
          EOF
          else
            cat >> reports/email-report.html << 'EOF'
                  <div style="background: #d4edda; padding: 15px; border-left: 4px solid #28a745; margin: 15px 0;">
                      <h3>‚úÖ No Critical Vulnerabilities</h3>
                      <p>Security scan completed successfully with no critical issues.</p>
                      <p>Application meets security requirements for healthcare data processing.</p>
                  </div>
          EOF
          fi

          cat >> reports/email-report.html << 'EOF'

                  <p>Detailed scan results are attached to this email.</p>

                  <div class="footer">
                      <p>This is an automated security report from GitHub Actions.</p>
                      <p><a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">View Workflow Run</a></p>
                      <p><em>PRC QR Generator - Secure eEHIC Document Generation</em></p>
                  </div>
              </div>
          </body>
          </html>
          EOF

          echo "HTML email report created"

      - name: Test email configuration
        if: ${{ github.event_name == 'schedule' || github.event.inputs.send_email == 'true' }}
        run: |
          echo "Testing email configuration..."
          echo "SMTP_SERVER: ${{ secrets.SMTP_SERVER && 'configured' || 'missing' }}"
          echo "SMTP_USERNAME: ${{ secrets.SMTP_USERNAME && 'configured' || 'missing' }}"
          echo "SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD && 'configured' || 'missing' }}"
          echo "SECURITY_EMAIL: ${{ secrets.SECURITY_EMAIL && 'configured' || 'missing' }}"

      - name: Send email report
        if: ${{ github.event_name == 'schedule' || github.event.inputs.send_email == 'true' }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT || '587' }}
          secure: true
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: '[SECURITY] PRC Generator - Critical:${{ steps.scan_results.outputs.critical_count }} High:${{ steps.scan_results.outputs.high_count }}'
          to: ${{ secrets.SECURITY_EMAIL }}
          from: ${{ secrets.SMTP_FROM_EMAIL || secrets.SMTP_USERNAME }}
          html_body: file://reports/email-report.html
          attachments: reports/trivy-report.txt,reports/summary.txt,reports/trivy-report.json
          priority: ${{ steps.scan_results.outputs.critical_count != '0' && 'high' || 'normal' }}
        continue-on-error: true

      - name: Email send result
        if: ${{ github.event_name == 'schedule' || github.event.inputs.send_email == 'true' }}
        run: |
          echo "Email send attempt completed."
          echo "If you see no errors above, the email was sent successfully."
          echo "If you see errors, please check your SMTP configuration in repository secrets."

      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'reports/trivy-results.sarif'
        continue-on-error: true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports-${{ github.run_number }}
          path: reports/
          retention-days: 30

      - name: Create workflow summary
        if: always()
        run: |
          echo "# üîí Trivy Security Scan Results - PRC QR Generator" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Application**: eEHIC-compliant Provisional Replacement Certificate Generator" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: 1.1.0 (with comprehensive logging)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| üî¥ Critical | ${{ steps.scan_results.outputs.critical_count }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üü† High | ${{ steps.scan_results.outputs.high_count }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üü° Medium | ${{ steps.scan_results.outputs.medium_count }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üü¢ Low | ${{ steps.scan_results.outputs.low_count }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Total** | **${{ steps.scan_results.outputs.total_count }}** |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.scan_results.outputs.critical_count }}" != "0" ]; then
            echo "## ‚ö†Ô∏è Action Required" >> $GITHUB_STEP_SUMMARY
            echo "${{ steps.scan_results.outputs.critical_count }} critical vulnerabilities found!" >> $GITHUB_STEP_SUMMARY
            echo "**Healthcare data security may be at risk - immediate review required.**" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ‚úÖ Security Status: Good" >> $GITHUB_STEP_SUMMARY
            echo "No critical vulnerabilities detected." >> $GITHUB_STEP_SUMMARY
            echo "Application meets security requirements for healthcare data processing." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìã Detailed reports are available in the workflow artifacts." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Key Components Scanned" >> $GITHUB_STEP_SUMMARY
          echo "- Node.js dependencies (@zandd/app-logger, jsonwebtoken, mongoose, etc.)" >> $GITHUB_STEP_SUMMARY
          echo "- JWT/QR code generation pipeline" >> $GITHUB_STEP_SUMMARY
          echo "- PDF generation and email services" >> $GITHUB_STEP_SUMMARY
          echo "- eEHIC compliance implementation" >> $GITHUB_STEP_SUMMARY
